#cloud-config
{{ ansible_managed | comment }}
{#
 # How to set setting on how to merge variables
 #merge_how:
 # - name: list
 #   settings: [append]
 # - name: dict
 #   settings: [recurse_array]
 #
 #}
preserve_hostname: false
hostname: {{ cloud_init_userdata.hostname }}
fqdn: {{ cloud_init_userdata.fqdn }}
manage_etc_hosts: true
ssh_pwauth: false  # disable ssh password authentication
disable_root: true # disable root login
ssh_deletekeys: true # delete potential builtin keys in the image
disable_root: true # disable root login
allow_public_ssh_keys: false # do not take public ssh keys from the datasource
ssh_quiet_keygen: false # do not output keygen to logs
ssh_publish_hostkeys:
  enabled: false # do not publish ssh keys to datasource

{% if cloud_init_enable_ssh_ca is sameas true -%}
# Write pre-generated SSH keys to the host, including signed certificate
ssh_keys:
{{ _ssh_host_ca_keys | to_nice_yaml(indent=2, sort_keys=False, default_style='|') | indent(2, true) }}
{% endif -%}
{#
 # Add groups to the system
 # The following example adds the ubuntu group with members 'root' and 'sys'
 # and the empty group cloud-users.
 # groups:
 #   - admingroup: [root,sys]
 #   - cloud-users
 #}
{% if cloud_init_userdata.groups is defined %}
{% if cloud_init_userdata.groups %}
{{ cloud_init_userdata.groups | to_nice_yaml }}
{% endif %}
{% endif %}

{#
 # Add users to the system. Users are added after groups are added.
 # Note: Most of these configuration options will not be honored if the user
 #       already exists. Following options are the exceptions and they are
 #       applicable on already-existing users:
 #       - 'plain_text_passwd', 'hashed_passwd', 'lock_passwd', 'sudo',
 #         'ssh_authorized_keys', 'ssh_redirect_user'.
 #}
{% if cloud_init_userdata.users is defined %}
{% if cloud_init_userdata.users %}
users:
  - name: ansible
    gecos: Ansible User
    shell: /bin/bash
    groups: sudo,wheel
    sudo: ALL=(ALL) NOPASSWD:ALL
{{ cloud_init_userdata.users | to_nice_yaml(indent=2, sort_keys=False) | indent(2, true) }}
{% endif %}
{% endif %}
{#
 # things that are possible
 # Valid Values:
 #   name: The user's login name
 #   expiredate: Date on which the user's account will be disabled.
 #   gecos: The user name's real name, i.e. "Bob B. Smith"
 #   homedir: Optional. Set to the local path you want to use. Defaults to
 #           /home/<username>
 #   primary_group: define the primary group. Defaults to a new group created
 #           named after the user.
 #   groups:  Optional. Additional groups to add the user to. Defaults to none
 #   selinux_user:  Optional. The SELinux user for the user's login, such as
 #           "staff_u". When this is omitted the system will select the default
 #           SELinux user.
 #   lock_passwd: Defaults to true. Lock the password to disable password login
 #   inactive: Number of days after password expires until account is disabled
 #   passwd: The hash -- not the password itself -- of the password you want
 #           to use for this user. You can generate a hash via:
 #               mkpasswd --method=SHA-512 --rounds=4096
 #           (the above command would create from stdin an SHA-512 password hash
 #           with 4096 salt rounds)
 #
 #           Please note: while the use of a hashed password is better than
 #               plain textkkjkkjkjkjk, the use of this feature is not ideal. Also,
 #               using a high number of salting rounds will help, but it should
 #               not be relied upon.
 #
 #               To highlight this risk, running John the Ripper against the
 #               example hash above, with a readily available wordlist, revealed
 #               the true password in 12 seconds on a i7-2620QM.
 #
 #               In other words, this feature is a potential security risk and is
 #               provided for your convenience only. If you do not fully trust the
 #               medium over which your cloud-config will be transmitted, then you
 #               should not use this feature.
 #
 #   no_create_home: When set to true, do not create home directory.
 #   no_user_group: When set to true, do not create a group named after the user.
 #   no_log_init: When set to true, do not initialize lastlog and faillog database.
 #   ssh_import_id: Optional. Import SSH ids
 #   ssh_authorized_keys: Optional. [list] Add keys to user's authorized keys file
 #                        An error will be raised if no_create_home or system is
 #                        also set.
 #   ssh_redirect_user: Optional. [bool] Set true to block ssh logins for cloud
 #       ssh public keys and emit a message redirecting logins to
 #       use <default_username> instead. This option only disables cloud
 #       provided public-keys. An error will be raised if ssh_authorized_keys
 #       or ssh_import_id is provided for the same user.
 #
 #   sudo: Defaults to none. Accepts a sudo rule string, a list of sudo rule
 #         strings or False to explicitly deny sudo usage. Examples:
 #
 #         Allow a user unrestricted sudo access.
 #             sudo:  ALL=(ALL) NOPASSWD:ALL
 #
 #         Adding multiple sudo rule strings.
 #             sudo:
 #               - ALL=(ALL) NOPASSWD:/bin/mysql
 #               - ALL=(ALL) ALL
 #
 #         Prevent sudo access for a user.
 #             sudo: False
 #
 #         Note: Please double check your syntax and make sure it is valid.
 #               cloud-init does not parse/check the syntax of the sudo
 #               directive.
 #   system: Create the user as a system user. This means no home directory.
 #   snapuser: Create a Snappy (Ubuntu-Core) user via the snap create-user
 #             command available on Ubuntu systems.  If the user has an account
 #             on the Ubuntu SSO, specifying the email will allow snap to
 #             request a username and any public ssh keys and will import
 #             these into the system with username specified by SSO account.
 #             If 'username' is not set in SSO, then username will be the
 #             shortname before the email domain.
 #
 #runcmd:
 #  - [ sh, -c, echo {{ ipv4 }} {{ hostname }} | tee -a /etc/hosts]
 #}
write_files:
{% if cloud_init_add_to_known_hosts is sameas true -%}
# SSH known hosts for GitHub
  - path: /etc/ssh/ssh_known_hosts
    owner: root:root
    permissions: "0644"
    content: |
{% for line in _github_hostkeys %}
      {{ line }}
{% endfor -%}
{% endif -%}
{# refactor to if cloud_init_enable_ansible_pull #}
{% if cloud_init_register_github_key is sameas true -%}
# Write SSH key to connect to Github
  - path: /home/ansible/.ssh/id_github.pub
    owner: ansible:ansible
    permissions: "0644"
    defer: true
    content: |
      {{ _github_public_sshkey }}
  - path: /home/ansible/.ssh/id_github
    owner: ansible:ansible
    permissions: "0600"
    defer: true
    content: |
{% for line in _github_private_sshkey.splitlines() %}
      {{ line }}
{% endfor %}
{% endif -%}
{% if cloud_init_enable_ansible_pull is sameas true -%}
  - path: /home/ansible/.ssh/config
    owner: ansible:ansible
    permissions: "0644"
    defer: true
    content: |
      Host github.com
        Hostname github.com
        IdentityFile ~/.ssh/id_github

      Host *
        IdentitiesOnly yes
  - path: /home/ansible/requirements.yaml
    owner: ansible:ansible
    permissions: "0644"
    defer: true
    content: |
{% for line in _ansible_pull_requirements_yaml %}
      {{ line }}
{% endfor -%}
{% endif -%}
{% if cloud_init_enable_ssh_ca is sameas true -%}
# Write files required for SSH CA
{{ _ssh_ca_write_files | to_nice_yaml(indent=2, sort_keys=False, default_style='|') | indent(2, true) }}
{% endif %}
{% if cloud_init_userdata.write_files is defined -%}
{% if cloud_init_userdata.write_files -%}
{{ cloud_init_userdata.write_files | to_nice_yaml(indent=2, sort_keys=False) }}
{% endif -%}
{% endif -%}

{% if cloud_init_userdata.runcmd is defined or cloud_init_userdata.enable_ssh_ca is defined %}
runcmd:
{% if cloud_init_enable_ssh_ca is sameas true -%}
{% if cloud_init_ssh_ca_runcmd is defined -%}
# Initialize SSH CA with commands
{% if cloud_init_ssh_ca_runcmd -%}
{{ cloud_init_ssh_ca_runcmd | to_nice_yaml(indent=2, sort_keys=False) | indent(2, True) }}
{% endif -%}
{% endif %}
{% if cloud_init_userdata.runcmd is defined -%}
{% if cloud_init_userdata.runcmd -%}
# Additional commands
{{ cloud_init_userdata.runcmd | to_nice_yaml(indent=2, sort_keys=False) | indent(2, True) }}
{% endif -%}
{% endif -%}
{% endif -%}
{% endif %}
# Packages to install
packages:
# Default packages
  - git
  - python3-pip
{% if cloud_init_userdata.packages is defined -%}
{% if cloud_init_userdata.packages -%}
# Additional packages
{{ cloud_init_userdata.packages | to_nice_yaml(indent=2, sort_keys=False) | indent(2, true) }}
{% endif -%}
{% endif %}
{% if cloud_init_enable_ansible_pull %}
# Ansible bootstrap
ansible:
  install_method: pip
  package_name: ansible
  run_user: ansible
  galaxy:
    actions:
      - ["install", "-r", "/home/ansible/requirements.yaml"]
  pull:
    url: "{{ cloud_init_ansible_pull_url }}"
    playbook_name: {{ cloud_init_ansible_playbook_name }}
{% endif %}
{#
 # packages:
 #   - ansible
 #   - git
 # Default user creation:
 #
 # Unless you define users, you will get a 'ubuntu' user on Ubuntu systems with the
 # legacy permission (no password sudo, locked user, etc). If however, you want
 # to have the 'ubuntu' user in addition to other users, you need to instruct
 # cloud-init that you also want the default user. To do this use the following
 # syntax:
 #   users:
 #     - default
 #     - bob
 #     - ....
 #  foobar: ...
 #
 # users[0] (the first user in users) overrides the user directive.
 #
 # The 'default' user above references the distro's config:
 # system_info:
 #   default_user:
 #     name: Ubuntu
 #     plain_text_passwd: 'ubuntu'
 #     home: /home/ubuntu
 #     shell: /bin/bash
 #     lock_passwd: True
 #     gecos: Ubuntu
 #     groups: [adm, audio, cdrom, dialout, floppy, video, plugdev, dip, netdev]
 #packages_update: true
 #packages_upgrade: true
 #
 # if you're already installing other packages, you may
 # wish to manually install ansible to avoid multiple calls
 # to your package manager
 # packages:
 #   - ansible
 #   - git
 # ansible:
 #   install-method: pip
 #   pull:
 #     url: "https://github.com/holmanb/vmboot.git"
 #     playbook-name: ubuntu.yml
 #}
{% if cloud_init_reboot_on_finish is sameas true -%}
# Reboot when done
power_state:
    delay: now
    mode: reboot
    message: Rebooting machine
{% endif %}
